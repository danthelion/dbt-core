# **what?**
# dbt-core requires a changelog generated by changie (a new .yml file in .changes/unreleased)
# for every PR.  There are a few exceptions and those will be manually given the `Skip Changelog`
# label.
# This action takes the following steps:
# 1. If the `Skip Changelog` label is present, no need to continue checks.
# 2. Otherwise, check is there is a new changelog file as part of this PR.  If there is, no need to continue.
# 3. If the `Skip Changelog` label is missing and there is no new file, check for the `dependencies` label.  That
#    indicates this change was generated by dependabot and then we want to auto-generate a changelog entry.
# 4. If none of the above applies, post a comment on the PR to add a changelog entry.
#
# When dependabot creates a PR, it always adds the `dependencies` label. This
# action will add a corresponding changie yaml file to that PR when that label is added.
# The file is created off a template:
#
# kind: Dependencies
# body: <PR title>
# time: <current timestamp>
# custom:
#   Author: dependabot
#   Issue: 4904
#   PR: <PR number>
#
# **why?**
# Automate changelog generation for more visability with automated dependency updates via dependabot.

# **when?**
# Once a PR is opened/reopened, labeled/unlabeled or a new commit is pushed to it this workflow will trigger.

name: Check Changelog Entry

on:
  pull_request:
    types: [opened, reopened, labeled, unlabeled, synchronize]
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  contents: write  # for the commit done for PRs with the `dependencies` label
  pull-requests: write  # to post a comment when there is no new changelog entry

jobs:
  skip_changelog_label_missing:
    name: skip_changelog_label_missing
    outputs:
      changelog_exists: ${{ steps.set_var.outputs.file_exists }}  # will be 'True' or 'False'
    if: "!contains(github.event.pull_request.labels.*.name, 'Skip Changelog')"

    runs-on: ubuntu-latest

    steps:
      - name: Print Status
        run: echo "Skip Changelog label does not exist on PR"

  changelog_file_check:
    name: changelog_file_check
    # only want to run this job if skip_changelog_label_missing ran, which will only happen if the label is missing
    needs: skip_changelog_label_missing
    outputs:
      changelog_exists: ${{ steps.filter.outputs.changelog }}  # will be 'True' or 'False'

    runs-on: ubuntu-latest
    steps:
      - name: Check if changelog file was added
        # https://github.com/marketplace/actions/paths-changes-filter
        # For each filter, it sets output variable named by the filter to the text:
        #  'true' - if any of changed files matches any of filter rules
        #  'false' - if none of changed files matches any of filter rules
        # also, returns:
        #  `changes` - JSON array with names of all filters matching any of the changed files
        uses: dorny/paths-filter@v2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            changelog:
              - added: '.changes/unreleased/**.yaml'
      - name: Set file variable
        id: set_var
        run: echo "::set-output name=file_exists::${{ steps.filter.outputs.changelog }}"

  dependency_changelog:
    needs: changelog_file_check
    if: ${{ github.event.label.name == 'dependencies' }} && ${{needs.changelog_file_check.outputs.file_exists}} == 'false'

    runs-on: ubuntu-latest

    steps:
    # timestamp changes the order the changelog entries are listed in the final Changelog.md file.  Precision is not
    # important here.
    # The timestamp on the filename and the timestamp in the contents of the file have different expected formats.
    - name: Get File Name Timestamp
      id: filename_time
      uses: nanzm/get-time-action@v1.1
      with:
        format: 'YYYYMMDD-HHmmss'

    - name: Get File Content Timestamp
      id: file_content_time
      uses: nanzm/get-time-action@v1.1
      with:
        format: 'YYYY-MM-DDTHH:mm:ss.000000-05:00'

    # changie expects files to be named in a specific pattern.
    - name: Generate Filepath
      id: fp
      run: |
        FILEPATH=.changes/unreleased/Dependencies-${{ steps.filename_time.outputs.time }}.yaml
        echo "::set-output name=FILEPATH::$FILEPATH"

    - name: Checkout Branch
      uses: actions/checkout@v2
      with:
        # persist-credentials: false is crucial otherwise Git push is performed with
        # github.token and not the token you configure using the env: GITHUB_TOKEN.
        # See: https://github.com/gr2m/create-or-update-pull-request-action/issues/281
        persist-credentials: false

    - name: Create file from template
      run: |
        echo kind: Dependencies > "${{ steps.fp.outputs.FILEPATH }}"
        echo body: ${{ github.event.pull_request.title }} >> "${{ steps.fp.outputs.FILEPATH }}"
        echo time: "${{ steps.file_content_time.outputs.time }}" >> "${{ steps.fp.outputs.FILEPATH }}"
        echo custom: >> "${{ steps.fp.outputs.FILEPATH }}"
        echo "  Author: ${{ github.event.pull_request.user.login }}" >> "${{ steps.fp.outputs.FILEPATH }}"
        echo "  Issue: 4904" >> "${{ steps.fp.outputs.FILEPATH }}"  # github.event.pull_request.issue for auto id?
        echo "  PR: ${{ github.event.pull_request.number }}" >> "${{ steps.fp.outputs.FILEPATH }}"

    - name: Commit Changelog File
      uses: gr2m/create-or-update-pull-request-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: ${{ github.event.pull_request.head.ref }}
        # author expected in the format "Lorem J. Ipsum <lorem@example.com>"
        author: "Github Build Bot <buildbot@fishtownanalytics.com>"
        commit-message: "Add automated changelog yaml from template"

  second_changelog_file_check:
  # since the previous job may or may not have created the changelog file, we need to check one more time for the file before we decide to write a comment to add a changelog entry
    name: second_changelog_file_check
    needs: skip_changelog_label_missing
    outputs:
      changelog_exists: ${{ steps.set_var.outputs.file_exists }}

    runs-on: ubuntu-latest
    steps:
      - name: Check if changelog file was added
        # https://github.com/marketplace/actions/paths-changes-filter
        # For each filter, it sets output variable named by the filter to the text:
        #  'true' - if any of changed files matches any of filter rules
        #  'false' - if none of changed files matches any of filter rules
        # also, returns:
        #  `changes` - JSON array with names of all filters matching any of the changed files
        uses: dorny/paths-filter@v2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            changelog:
              - added: '.changes/unreleased/**.yaml'
      - name: Set file variable
        run: echo "::set-output name=file_exists::${{ steps.filter.outputs.changelog }}"

  add_changelog_comment:
    name: add_changelog_comment
    needs: second_changelog_file_check

    if: ${{needs.second_changelog_file_check.outputs.file_exists}} == 'false'
    runs-on: ubuntu-latest
    env:
      changelog_comment: 'Thank you for your pull request! We could not find a changelog entry for this change. For details on how to document a change, see [the contributing guide](https://github.com/dbt-labs/dbt-core/blob/main/CONTRIBUTING.md#adding-changelog-entry).'

    steps:
      - name: Check if comment already exists
        uses: peter-evans/find-comment@v1
        id: changelog_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: ${{ env.changelog_comment }}

      - name: Create PR comment if changelog entry is missing, required, and does not exist
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ env.changelog_comment }}

      - name: Fail job if changelog entry is missing and required
        uses: actions/github-script@v6
        with:
          script: core.setFailed('Changelog entry required to merge.')
